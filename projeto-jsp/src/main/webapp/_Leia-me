JavaServer Pages (JSP) - Não é um framework
JSP é acrônimo para JavaServer Pages, uma linguagem criada pela SUN gratuita, JSP é uma linguagem
de script com especificação aberta que tem como objetivo primário a geração de conteúdo dinâmico 
para páginas de internet.

Link projeto:
localhost:8080/projeto-jsp
ou
localhost:8080/projeto-jsp/index.jsp

------------------------------------------------

Os parametros são passados pela url, por exemplo:

 localhost:8080/projeto-jsp/receber-nome.jsp?<parametro>=<valor_parametro>
 
 localhost:8080/projeto-jsp/receber-nome.jsp?nome=Daniel 
 
 O que tiver depois do ponto de interrogação (?) é o recurso que estamos chamando e o “&” 
 comercial é para separar os parametros, ou seja, por exemplo:
 
 localhost:8080/projeto-jsp/receber-nome.jsp?nome=Daniel&idade=34
 
 Para acessar e resgatar o request, para capturar esse comando vai ser preciso usar um 
 delimitador "<%  %>" que tem a função de separar o html e o java. Por padrão dentro desses 
 delimitadores já conseguem acessar o request, o response e entre outros (ctrl + espaço).
 
 Codigo: 
 
 <% request.getParameter("nome"); %>
 OBS. get = capturar; parameter = capturar
 
Método Get
Esse método passa as informações na url, mostrando os dados da página. A palavra "get" quer 
dizer capturar o parametro. 
 
Método Post
É para transferência de dados para o servidor. Esse método não passa as informações na url, as
informações da página ficam ocultas. A palavra "post" quer dizer postar. 

------------------------------------------

Sobre Servlet

Servlet é uma classe Java que estende a classe HttpServlet, ela fica responsável por ampliar 
a capacidade dos servidores que permitem acesso a aplicações por meio do modo request e 
response. Quando o cliente (browser) executa uma request, ela é passada para um servlet que 
vai interpretar e enviar para o servidor web, sendo assim, o servidor envia uma response para
o servlet, que irá convertê-la em HTML e logo após desse processo, o servlet irá devolvê-la
para o determinado serviço web.

Servlet tem como função:
. Receber os dados;
. Processa;
. Grava, salva, edita, consulta;
. Gera relatório;
. Efetua a resposta para a tela.

Servlet é um objeto especial java programado para receber dois objetos, que são eles: 

. httpServletRequest - Request (Requisição - Pedido - Envio de Tela) 

. httpServletResponse - Response (Retorno - Resposta do servidor)

Esses dois objetos vão ser gerados e montados pelo Tomcat. 
Quando uma requisição Http é enviada, ela passa pelo servidor Tomcat e esses dados Http tem 
que ser inseridos no Servlet, e dentro dele vai ser capturado e controlado, ou seja, o que 
vai ser decidido dele, portanto, ele controla (controller). 
E sempre que quiser dar uma resposta coloca dentro do objeto java HttpServletResponse. 
Portanto, o servlet vai controlar a requisição e a resposta do browser. 

Arquitetura de Servlet

HttpServlet: Esta classe possui basicamente 6 métodos que são chamados automaticamente de 
acordo com os métodos HTTP, que são requisitados.
Exemplo:
Se a request de seu browser for feita pelo método GET, no seu servlet deverá ser chamado o método doGet(). 
Basicamente irá trabalhar com dois métodos: o get e o post. Os 6 métodos são: 

. doPost(); = usada para transferir informações de forma oculta. 
. doGet(); = usado mais para consultas que não envolva informações sigilosas.
. doPut(); = usada para editar (ou atualizar) o registro.
. doDelete(); = usado para deletar as informações do registro.
. doOption(); 
. doTravel()

HttpServletRequest: É uma interface. O browser faz um request ao servidor para obter informações importantes, 
como referências e cookies, elas são tratadas utilizando métodos desta interface, podendo 
recuperar cabeçalho e parâmetros passados pelo servidor. Os principais métodos utilizados para 
usar os recursos da interface são:

. getHeaderName(); = pega todos os nomes do cabeçalho;
. getHeader(); = pega todos os valores do cabeçalho;
. getQueryString(); = pega a query String completa;
. getParameterNames(); = pega todos os names parâmetros passados;
. getParameterValues(); = recuperação de parâmetros de multiplos valores;
. getParameter(); = Recuperação de parâmetros de acordo com o nome passado.

HttpServletResponse: É uma interface, que oferece vários métodos específicos de protocolo. 
Sempre você precisará especificar a saída para o seu browser, utilizando os métodos:

. setContentType(); =  neste devemos especificar o tipo de conteúdo que irá responder.
. getWriter(); = server para imprimir na tela.

--------------------------------------------------
Erros

Erro 404 - Pode ser inúmeras coisas, esse erro é o terror dos programadores. Pode ser erro 
de projeto, erro de mapeamento (erros nas palavras), erro no banco de dados, de retorno, de programação, etc...

Passos para identificar o erro:

1º Olhar no console para vê se tem algum erro de java.

2º Acessar a página que inicia o erro e através dessa página confere para onde está fazendo a requisição. 
E a partir dali verificar se está com erro de mapeamento, podendo ter errado uma letra ou ter
colocado uma letra maiuscula sendo ela minuscula, ou uma barra e etc...

3º Redirecionar para uma página que não existe, verificar a extensão da página se está 
corretamente escrita.

4º As validações nos casos de condicionamentos, ou seja, verificar os if e else, etc...

------------------------------------------
Para didatica

O pacote filter é para casos como interceptar as requisições e dar as respostas, ou seja, os 
dados irão passar por esses filtro podendo ter algumas rotinas centralizadas, por exemplo, 
abrir sessão, abrir conexão, dar commit, dar rollback ou fazer um redirecionamento. 
Portanto, o mais comum é obrigar o filtro a identificar se o usuário está logado ou não, logo
irá disparar na tela de login para avisar ao usuario que ele precisa se logar. 

------------------------------------------

Bom saber:
A conexão só existe uma única vez, ou seja, não se abre e feche conexão a todo momento, 
isso acarreta uma lentidao extrema ao seu sistema. O que abre e fecha a todo momento sao 
sessões e transações (operações de consulta, delete, ...).

------------------------------------------

Site Bootstrap (para pesquisas sobre suas propriedades e valores)
https://getbootstrap.com/docs/5.0/getting-started/introduction/

------------------------------------------

Não existe validação para o caso em que os campos estejam vazios. Logo vai ser feito uma 
validação para que NÃO precise fazer requisição ao servidor para processar o formulário, uma
vez que o usuário não informou nenhum campo do formulário.
Ou seja, essa validação é para não precisar pedir uma requisição de processamento para enviar
o formúlario. Portanto, o objetivo é fazer uma validação diretamente pelo formulário.

Vou usar as funcionalidades do bootstrap 5 que já tem validações já implementadas para 
formulário.
Site: https://getbootstrap.com/docs/5.0/forms/validation/

-------------------------------------------
Para fazer o logout. Ele vai sempre fazer um redirecionamento para do doGet. Portanto, tem que 
pegar a ServletLogin e passar uma ação para ela.

Ação = "/servletLogin?acao=logout"

-------------------------------------------
Para carregar na tela o usuário logado vou ter que recuperar o usuário setado no ServletLogin.
Ou seja, no caso esse "request.getSession().setAttribute("usuario", modelLogin.getLogin());"

Bom saber - outra forma de pegar oa sessao de requisicao do atributo do usuário:
<%= request.getSession().getAttribute("usuario") %>

Ou pode pegar a sessao diretamente:
<%= session.getAttribute("usuario") %>

-------------------------------------------

Sempre que for reaproveitar um formulario, é bom renomear os atributos "name" e 
"id" dos campos de entrada, no caso igual os atributos da entidade modelo que 
representa o banco de dados.

Bom saber:
required="required" --> para campo obrigatorio.

readonly="readonly" --> desabilitar o campo.

autocomplete="off" --> não preencher o campo automaticamente.  

Próximo passo é fazer a action e o method do form para o controller. Vai ser criado a action, 
o method e o controller.

Próximo passo é interceptar os parâmetros (nome, email e senha) do formulário.

-------------------------------------------
 Para recuperar os valores dos campos e mostrar na tela, usa-se o comando 
 setAttribute("valor_atributo",objeto). 
 Para mostrar esse valor usa-se o atributo "value" no formulário. 
 Ex: < value = ${valor_atributo.nome}>
 
 ou para exibir mensagem na tela para informação - ex:
 request.setAttribute("msg", "Usuário gravado no banco de dados com sucesso!");
 
 na tela:
 <span>${msg}</span>
 
 -------------------------------------------
 Para delete:
 Passamos um parametro dentro do form para identificar e fazer um delete. Ele vai ficar oculto (hidden)
 dentro do formulario.
 
 Vamos fazer enviar pela mesma servlet atraves do método doGet (que é usado para consultar e deletar).
 OBS. O método doPost é usado para salvar e atualizar.
 
 -------------------------------------------
 Delete com ajax
 A diferença é q com o ajax não existe redirecionamento, ou seja, não faz envio de formulário em 
 html e sim de dados por parametro. E também o retorno não existe um redirecionamento de página, 
 o que existe é um retorno de um dado, ou seja, de uma confirmação.
 
 -------------------------------------------
 Com o modal não é possivel fazer um redirecionamento e recarregamento da tela, porque ele some. Logo 
 a busca será feita em ajax fazendo com que trabalhemos somente dentro do modal. 
 Como funciona: Vai ser disparado uma consulta ao banco de dados com javascript e retorna o json e
 com o javascript preenche a tela. 

--------------------------------------------
Vale ressaltar que é preciso saber se o 'response' do usuario.jsp está em formato json, uma vez que 
ele pode estar em formato de String.
Caso ele não esteja em formato json vai ser preciso converter em formato json.
Uma forma de descobrir se está em formato json é pelo tamanho usando o '.length'.

---------------------------------------------
JSTL - FONTE: https://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm

A JavaServer Pages Standard Tag Library (JSTL) é uma coleção de tags JSP úteis que encapsula a 
funcionalidade principal comum a muitos aplicativos JSP.

JSTL tem suporte para tarefas estruturais comuns, como iteração e condicionais, tags para manipulação 
de documentos XML, tags de internacionalização e tags SQL. Ele também fornece uma estrutura para 
integrar as tags customizadas existentes com as tags JSTL.

Tags principais
O grupo principal de tags são as tags JSTL mais usadas. A seguir está a sintaxe para incluir a biblioteca JSTL Core em seu JSP:
<%@ taglib prefix = "c" uri = "http://java.sun.com/jsp/jstl/core" %>

--------------------------------------------
É importante criar um usuário admin padrao para controlar o sistema. O objetivo é criar
uma forma de bloqueio para que ninguem consiga acessar a sua conta de administrador, 
ou seja, para que ninguem consiga editar a sua conta.

Para fazer isso basta ter um campo 'useradmin' do tipo boolean no banco de dados para que o
usuário que tiver permissao com o valor 'true' possa ter a possibilidade de fazer qualquer
coisa no projeto, isto é, atualizar o projeto com novas funcionalidades quando precisar.

Vale ressaltar q esse usuario admin não pode ser mostrado na tela. Logo todas as sql (no dao) 
que traz todos os usuarios precisarão ter uma restrição para que isso não aconteça.

----------------------------------------------

Começar a separar os dados por usuários, por exemplo, digamos que temos vários usuários 
e que queremos separar os dados.

 1º tem que ter uma coluna em todas as tabelas que foram 
criadas para separar os dados pelo usuário, como por exemplo separar os dados quando o 
usuário fizer o cadastro, ou seja, para identificar cada usuario vamos criar uma coluna id.

2º Criar o campo id_usuario como uma chave estrangeira e contudo add uma constrante para 
identificá-la como uma chave primária que vai fazer uma referencia a tabela usuario_model
para a coluna id.

Criar um servlet generico para logar o usuario (vai chamar o dao também e a conexão com o banco de dados).

Agora vai ter que levar em consideração todo o usuário que estiver logado, ou seja, o 
id_usuario que vai estar logado, portanto, terá que add na condição do sql do dao o campo id_usuario.

----------------------------------------------

Controlando o tipo de perfil do usuário, para isso vai ser preciso de um campo especificando 
o tipo de usuário, por exemplo, tipo usuário secretária. Na tela pode-se colocar um combo
de opções com vários tipos de usuários.

----------------------------------------------
Para fazer o upload de imagem o formulario precisa de um tipo de dados cujo a propriedade e o valor é:
enctype="multipart/form-data" 
E na servlet tem que adicionar a anotação @MultipartConfig para poder fazer o upload de imagem (por exemplo, imagem de foto).
Proximo passo adicionar um campo de foto na tela. Serão add dois botões - segue o exemplo no site da bootstrap:
https://getbootstrap.com/docs/4.0/components/forms

Adicionar uma propriedade accept para aceitar qlq valor de imagem ao ser carregada pelo usuário,
ficaria assim: accept="image/*"

Depois de add a imagem a página precisa ser atualizada, vamos fazer isso com a propriedade onchange que vai 
chamar uma função JS que vai ser passado dois parametros o "id da imagem" e o "id do campo tipo file". 

Ex: onchange="visualizarImg('fotoembase64', 'fileFoto');"

Proximo passo é fazer essa imagem chegar na servletUsuarioController.

Proximo passo é inserir no banco de dados (DaoUsuarioRepository) e fazer uma atualização. Para a 
atualização vai ser feita uma condicional para saber se realmente foi gravado uma foto, caso 
entre na condição terá que ser feito uma sql para atualizar, por fim prepara a sql e executa.

Site para converter imagem base64 -> https://base64.guru/converter/decode/image 
Copie a base64 gravada no BD e cola no site para verificar se é a imagem correta.

----------------------------------------------

Para fazer um campo de download de imagem tem que adicionar uma tag <a> sobre a tag <img>. O
atributo 'href' dispara um get que vai para o ServletUsuario. Vai ser passado uma ação que vai ser
capturada pelo getParameter e nessa ação terá uma condição para o download da imagem.

----------------------------------------------

Consumindo API WebService ViaCEP

https://viacep.com.br/
https://viacep.com.br/exemplo/jquery/


----------------------------------------------
 Paginação é um carregamento por demanda, por exemplo, não seria prudente carregar todos
 os usuário senão prejudicaria a perfomance do sistema, ou seja, poderia tornar lenta o carregamento
 da tela.
 
 Por exemplo, poderia carregar de cinco em cinco o usuário, limitando o carregamento para garantir
 melhor performance ao sistema.
 
 https://getbootstrap.com/docs/4.0/components/pagination/
 
 ----------------------------------------------
 O telefone não vai ser retornado para a tela, apenas será carregado uma lista.
 
 Na Servlet:
Vai ser criado um link para telefone no usuario.jsp, o intuito é enviar o formulário através desse link, ou seja, 
o href vai enviar um link para a ServletTelefone (vai disparar um doGet), esse link vai conter o parametro
do id do usuário para identificá-lo, isto é, vai abrir a tela do telefone do usuário referenciado.
 




